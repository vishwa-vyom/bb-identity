openapi: 3.1.0
x-stoplight:
  id: 6f1syzijynu40
info:
  title: ID Building Block
  version: '1.0'
  contact:
    name: MOSIP Team
    email: info@mosip.io
    url: 'https://www.mosip.io/'
  description: |-
    This API document details on the below categories of endpoints
    <ul>
    <li> Client Management - Endpoints for creation and updation of OIDC client details </li>
    <li> OIDC - All OIDC compliant endpoints for performing the Open ID Connect flows</li>
    <li> Wallet - QR Code - All endpoints used by the Wallet binding and Wallet - QR code based authentication</li>
    </ul>

    <b>Abbreviations:</b></br></br>
    OIDC - Open ID Connect</br>
    IdP - Identity provider</br>
    KYC - Know Your Customer</br>
    UIN - Unique Identification Number</br>
    VID - Virtual Identifier</br>
    PSUT - Partner(Relying Party) Specific User Token</br>

        
        
       
  license:
    name: MPL-2.0
    url: 'https://www.mozilla.org/en-US/MPL/2.0/'
  summary: Open ID Connect based identity verifier for large scale authentications
servers: []
paths:
  /client-mgmt/oidc-client:
    post:
      summary: Create OIDC Client Endpoint
      operationId: post-client
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: OIDC client details
              properties:
                requestTime:
                  type: string
                  pattern: ''
                  description: Current date and time when the request is sent
                request:
                  type: object
                  required:
                    - clientId
                    - clientName
                    - relyingPartyId
                    - logoUri
                    - redirectUris
                    - authContextRefs
                    - publicKey
                    - userClaims
                    - grantTypes
                    - clientAuthMethods
                  properties:
                    clientId:
                      type: string
                      description: 'Unique OIDC client id (Case-Sensitive). If duplicates found, request will be rejected.'
                      example: 785b806d0e594657b05aabdb30fff8a4
                      maxLength: 50
                      minLength: 1
                    clientName:
                      type: string
                      minLength: 1
                      maxLength: 256
                      description: Name of OIDC client.
                      example: ABC Health Care
                    relyingPartyId:
                      type: string
                      description: |-
                        Relying Party ID of the client. This will be passed on to authentications servers when KYC is fetched.

                        Note: Use the client Id as relyingPartyId if there is no separate concept of relying party in the ID authentication system.
                      example: bharathi-inc
                      minLength: 1
                      maxLength: 50
                    logoUri:
                      type: string
                      description: Relying party logo URI which will used to display logo in OIDC login and permission pages.
                      format: uri
                      minLength: 1
                      maxLength: 1024
                    redirectUris:
                      type: array
                      description: |-
                        Valid list of callback Uris of the relying party. 
                        When OIDC authorize API is called, any one Uri from this list should be sent as redirect_uri. authorization_code will be redirected to this Uri on successful authentication.
                      minItems: 1
                      uniqueItems: true
                      items:
                        type: string
                        minLength: 1
                        format: uri
                    authContextRefs:
                      type: array
                      description: The Authentication Context Class Reference is case-sensitive string specifying a list of Authentication Context Class values that identifies the Authentication Context Class. Values that the authentication performed satisfied implying a Level Of Assurance.
                      minItems: 1
                      items:
                        type: string
                        enum:
                          - 'idbb:acr:static-code'
                          - 'idbb:acr:generated-code'
                          - 'idbb:acr:linked-wallet'
                          - 'idbb:acr:biometrics'
                          - 'idbb:acr:biometrics-generated-code'
                          - 'idbb:acr:linked-wallet-static-code'
                    publicKey:
                      type: object
                      description: |-
                        OIDC client's public key used to verify the client's private_key_jwt when OIDC token endpoint is invoked. 
                        This field will not be allowed to udpate later, if the private key is compromised, then new OIDC client to be created.
                        Format : Json Web Key (JWK).
                    userClaims:
                      type: array
                      description: 'Allowed user info claims, that can be requested by OIDC client in the authorize API'
                      minItems: 1
                      items:
                        type: string
                        enum:
                          - name
                          - given_name
                          - family_name
                          - middle_name
                          - preferred_username
                          - nickname
                          - gender
                          - birthdate
                          - email
                          - email_verified
                          - phone_number
                          - phone_number_verified
                          - picture
                          - address
                          - locale
                          - zoneinfo
                    grantTypes:
                      type: array
                      description: Form of Authorization Grant presented to token endpoint
                      minItems: 1
                      uniqueItems: true
                      items:
                        type: string
                        enum:
                          - authorization_code
                    clientAuthMethods:
                      type: array
                      description: Auth method supported for token endpoint. At present only "private_key_jwt" is supported.
                      minItems: 1
                      items:
                        type: string
                        enum:
                          - private_key_jwt
              required:
                - requestTime
                - request
            examples:
              example-1:
                value:
                  requestTime: '2011-10-05T14:48:00.000Z'
                  request:
                    clientId: e-health-service
                    clientName: Health Service
                    relyingPartyId: bharath-gov
                    logoUri: 'http://example.com'
                    redirectUris:
                      - 'http://example.com/login-success'
                    publicKey: {}
                    authContextRefs:
                      - 'idbb:acr:generated-code'
                    userClaims:
                      - name
                    grantTypes:
                      - authorization_code
                    clientAuthMethods:
                      - private_key_jwt
        description: ''
      description: |-
        API to add new open ID connect (OIDC) clients, it can be invoked by other modules which manages the relying parties / partners.

        Each relying party can associate to one or multiple OIDC client Ids.

        On create, OIDC client status will be by default set to "**active**".
      x-internal: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                    description: Date and time when the response is generated
                  response:
                    type: object
                    properties:
                      clientId:
                        type: string
                        description: Client id as provided in the request.
                  errors:
                    type: array
                    items:
                      type: object
                      additionalProperties: false
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - duplicate_client_id
                            - invalid_public_key
                            - invalid_input
                            - invalid_client_id
                            - invalid_client_name
                            - invalid_rp_id
                            - invalid_claim
                            - invalid_acr
                            - invalid_uri
                            - invalid_redirect_uri
                            - invalid_grant_type
                            - invalid_client_auth
                            - invalid_request
                        errorMessage:
                          type: string
        '401':
          description: Unauthorized
      tags:
        - Client Management
      parameters: []
      security:
        - Authorization-add_oidc_client: []
    parameters: []
  '/client-mgmt/oidc-client/{client_id}':
    parameters:
      - schema:
          type: string
          example: 785b806d0e594657b05aabdb30fff8a4
        name: client_id
        in: path
        required: true
        description: Client Identifier
    put:
      summary: Update OIDC Client Endpoint
      operationId: put-oidc-client-client_id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                    description: Date and time when the response is generated
                  response:
                    type: object
                    properties:
                      clientId:
                        type: string
                        description: OIDC client identifier.
                    required:
                      - clientId
                  errors:
                    type: array
                    description: 'List of Errors in case of request validation / processing failure in IDBB server. When request processing is fully successful, this array will be empty.'
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_client_id
                            - invalid_client_name
                            - invalid_claim
                            - invalid_acr
                            - invalid_uri
                            - invalid_redirect_uri
                            - invalid_grant_type
                            - invalid_client_auth
                            - invalid_request
                        errorMessage:
                          type: string
      description: |-
        API to update existing Open ID Connect (OIDC) client, it can be invoked by other modules which manages the relying parties / partners when there any updates on the fields accepted in this API.

        **Authentication and authorization** is based on a valid JWT issued by a trusted IAM system including "**update_oidc_client**" scope.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                requestTime:
                  type: string
                  pattern: ''
                  description: Current date and time when the request is sent
                request:
                  type: object
                  required:
                    - clientName
                    - status
                    - logoUri
                    - redirectUris
                    - userClaims
                    - authContextRefs
                    - grantTypes
                    - clientAuthMethods
                  properties:
                    clientName:
                      type: string
                      description: Name of the OIDC client.
                      minLength: 1
                      maxLength: 256
                      example: ABC Health Care
                    status:
                      type: string
                      enum:
                        - active
                        - inactive
                      description: Status of OIDC client.
                    logoUri:
                      type: string
                      description: Relying party logo URI which will used to display logo in OIDC login and permissi
                      format: uri
                      minLength: 1
                      maxLength: 1024
                    redirectUris:
                      type: array
                      description: 'Valid list of callback Uris of the relying party. When OIDC authorize API is called, any one Uri from this list should be sent as redirect_uri. authorization_code will be redirected to this Uri on successful authentication.'
                      minItems: 1
                      uniqueItems: true
                      items:
                        type: string
                        format: uri
                        minLength: 1
                    userClaims:
                      type: array
                      description: 'Allowed user info claims, that can be requested by OIDC client in the authorize API'
                      minItems: 1
                      items:
                        type: string
                        enum:
                          - name
                          - given_name
                          - family_name
                          - middle_name
                          - preferred_username
                          - nickname
                          - gender
                          - birthdate
                          - email
                          - email_verified
                          - phone_number
                          - phone_number_verified
                          - picture
                          - address
                          - locale
                          - zoneinfo
                    authContextRefs:
                      type: array
                      description: The Authentication Context Class Reference is case-sensitive string specifying a list of Authentication Context Class values that identifies the Authentication Context Class. Values that the authentication performed satisfied implying a Level Of Assurance.
                      minItems: 1
                      uniqueItems: true
                      items:
                        type: string
                        enum:
                          - 'idbb:acr:static-code'
                          - 'idbb:acr:generated-code'
                          - 'idbb:acr:linked-wallet'
                          - 'idbb:acr:biometrics'
                          - 'idbb:acr:biometrics-generated-code'
                          - 'idbb:acr:linked-wallet-static-code'
                    grantTypes:
                      type: array
                      description: Form of Authorization Grant presented to token endpoint.
                      minItems: 1
                      items:
                        type: string
                        enum:
                          - authorization_code
                    clientAuthMethods:
                      type: array
                      description: Auth method supported for token endpoint. At present only "private_key_jwt" is supported.
                      minItems: 1
                      items:
                        type: string
                        enum:
                          - private_key_jwt
              required:
                - requestTime
                - request
            examples:
              example-1:
                value:
                  requestTime: '2022-09-22T08:03:45.000Z'
                  request:
                    clientName: Health Service
                    status: active
                    logoUri: 'http://example.com'
                    redirectUris:
                      - 'http://example.com/login-success'
                    userClaims:
                      - name
                    authContextRefs:
                      - 'idbb:acr:generated-code'
                    grantTypes:
                      - authorization_code
                    clientAuthMethods:
                      - private_key_jwt
        description: ''
      security:
        - Authorization-update_oidc_client: []
      tags:
        - Client Management
  /authorize:
    get:
      summary: Authorization Endpoint
      operationId: get-authorize
      description: |-
        This is the authorize endpoint of Open ID Connect (OIDC). The relying party applications will do a browser redirect to this endpoint with all required details passed as query parameters.

        This endpoint will respond with a HTML page / JS application to be loaded in the browser.

        All the validations on the query parameter values will be performed, in case of any failures respective error message will be sent along with browser redirection back to relying party application.
      parameters:
        - schema:
            type: string
            default: openid profile
            enum:
              - openid profile
              - openid
              - profile
              - email
              - address
              - phone
              - offline_access
          in: query
          name: scope
          description: Specifies what access privileges are being requested for Access Tokens. The scopes associated with Access Tokens determine what resources will be available when they are used to access OAuth 2.0 protected endpoints. OpenID Connect requests MUST contain the OpenID scope value.
          required: true
        - schema:
            type: string
            enum:
              - code
          in: query
          name: response_type
          description: 'The value set here determines the authorization processing flow. To use the Authorization Code Flow, the value should be configured to "code".'
          required: true
        - schema:
            type: string
            maxLength: 256
          in: query
          name: client_id
          required: true
          description: Valid OAuth 2.0 Client Identifier in the Authorization Server.
        - schema:
            type: string
            format: uri
          in: query
          name: redirect_uri
          description: Redirection URI to which the response would be sent. This URI must match one of the redirection URI values during the client ID creation.
          required: true
        - schema:
            type: string
            maxLength: 256
          in: query
          description: 'Opaque value used to maintain state between the request and the callback. Typically, Cross-Site Request Forgery (CSRF, XSRF) mitigation is done by cryptographically binding the value of this parameter with a browser cookie.'
          name: state
        - schema:
            type: string
          in: query
          description: 'String value used to associate a Client session with an ID Token, and to mitigate replay attacks. The value is passed through unmodified from the Authentication Request to the ID Token.'
          name: nonce
        - schema:
            type: string
            enum:
              - page
              - popup
              - touch
              - wap
          in: query
          name: display
          description: ASCII string value that specifies how the Authorization Server displays the authentication and consent user interface pages to the end user.
        - schema:
            type: string
            enum:
              - none
              - login
              - consent
              - select_account
            example: consent
          in: query
          name: prompt
          description: Space delimited case-sensitive list of ASCII string values that specifies whether the Authorization Server prompts the End-User for re-authentication and consent.
        - schema:
            type: number
          in: query
          name: max_age
          description: 'Maximum Authentication Age. This specifies the allowable elapsed time in seconds since the last time the end user was actively authenticated by the OP. If the elapsed time is greater than this value, then the OP MUST attempt to actively re-authenticate the end user. The max_age request parameter corresponds to the OpenID 2.0 PAPE [OpenID.PAPE] max_auth_age request parameter. When max_age is used, the ID Token returned MUST include an auth_time claim value.'
        - schema:
            type: string
          in: query
          name: ui_locales
          description: 'End user''s preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. For instance, the value "fr-CA fr en" represents a preference for French as spoken in Canada, then French (without a region designation), followed by English (without a region designation). An error SHOULD NOT result if some or all of the requested locales are not supported by the OpenID Provider.'
        - schema:
            type: string
            enum:
              - 'idbb:acr:static-code'
              - 'idbb:acr:generated-code'
              - 'idbb:acr:linked-wallet'
              - 'idbb:acr:biometrics'
              - 'idbb:acr:biometrics-generated-code'
              - 'idbb:acr:linked-wallet-static-code'
          in: query
          name: acr_values
          description: 'Requested Authentication Context Class Reference values. Space-separated string that specifies the acr values that the Authorization Server is being requested to use for processing this Authentication Request, with the values appearing in order of preference. The Authentication Context Class satisfied by the authentication performed is returned as the acr Claim Value, as specified in Section 2. The acr Claim is requested as a Voluntary Claim by this parameter.'
        - schema:
            type: string
          in: query
          name: claims_locales
          description: 'End-User''s preferred languages and scripts for Claims being returned, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. An error SHOULD NOT result if some or all of the requested locales are not supported by the OpenID Provider.'
        - schema:
            type: string
          in: query
          name: claims
          description: This parameter is used to request specific claims to be returned. The value is a JSON object listing the requested claims. The claims parameter value is represented in an OAuth 2.0 request as UTF-8 encoded JSON.
      responses:
        '200':
          description: |-
            OK

            Loads IDBB UI application in browser for interacting with user for Login process
      tags:
        - OIDC
    parameters: []
  /linked-authorization/link-code:
    post:
      summary: Generate Link Code endpoint
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                  response:
                    type: object
                    properties:
                      transactionId:
                        type: string
                        description: The same transactionId passed as part of the request.
                      linkCode:
                        type: string
                        description: Unique random string mapped to this transactionId.
                      expireDateTime:
                        type: string
                        description: Expire date time (ISO format) for the generated linkCode. After this date time linkCode in this request is not valid.
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_transaction_id
                            - link_code_gen_failed
                            - invalid_transaction
                            - invalid_request
                        errorMessage:
                          type: string
      operationId: get-authorization-generate-link-code
      description: |-
        Generate link code request is raised from IDBB UI application.

        1. UI application creates a deeplink with this link-code as parameter.
        2. This deeplink is embedded in a Machine-readable-code (like QR code) and the same is rendered in the UI.
        3. End user scans this machine-readable-code to open wallet app.
        4. On open of wallet-app, wallet-app invokes /link-transaction endpoint.
        5. In the UI application, once machine-readable-code is rendered, at the same time /link-status endpoint is invoked as a long polling request.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                requestTime:
                  type: string
                request:
                  type: object
                  required:
                    - transactionId
                  properties:
                    transactionId:
                      type: string
                      description: TransactionId that associates the current transaction / session with the relying party redirection. IDBB backend application should be able to maintain this association with respective to the transaction Id.
              required:
                - requestTime
                - request
      parameters:
        - schema:
            type: string
          in: header
          name: X-XSRF-TOKEN
          description: CSRF token as set in cookie key 'XSRF-TOKEN'
          required: true
      tags:
        - Wallet - QR Code
    parameters: []
  /linked-authorization/link-status:
    post:
      summary: Link status endpoint
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTIme:
                    type: string
                  response:
                    type: object
                    properties:
                      transactionId:
                        type: string
                        description: This is the same transactionId as sent in the request.
                      linkStatus:
                        type: string
                        description: Link status of the linkCode passed in the request.
                        enum:
                          - LINKED
                      linkedDateTime:
                        type: string
                        description: Epoch in milliseconds at which the wallet-app acknowledged the link-code.
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_transaction_id
                            - invalid_link_code
                            - response_timeout
                            - unknown_error
                            - invalid_request
                        errorMessage:
                          type: string
      operationId: post-authorization-link-status
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                requestTime:
                  type: string
                request:
                  type: object
                  required:
                    - transactionId
                    - linkCode
                  properties:
                    transactionId:
                      type: string
                      description: This is the same transactionId sent in the /link-code request
                    linkCode:
                      type: string
                      description: This is same linkCode returned in the generate-link-code response.
              required:
                - requestTime
                - request
      description: |-
        The link status endpoint is invoked from IDBB UI application.

        1. Checks the status of link code and will return the status as LINKED once the /link-transaction endpoint is called from wallet application.
      parameters:
        - schema:
            type: string
          in: header
          name: X-XSRF-TOKEN
          description: CSRF token as set in cookie key 'XSRF-TOKEN'
          required: true
      tags:
        - Wallet - QR Code
    parameters: []
  /linked-authorization/link-auth-code:
    post:
      summary: Link authorization code endpoint
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                  response:
                    type: object
                    properties:
                      code:
                        type: string
                        description: Authorization code. Required to obtain the ID token and / or access token from the /token endpoint.
                      redirectUri:
                        type: string
                        description: Client's validated redirect URI.
                      state:
                        type: string
                        description: 'The echoed state value, used to maintain state between the request and the callback'
                      nonce:
                        type: string
                        description: 'The echoed nonce value, if one was passed with the request. Clients must validate the value before proceeding.'
                  errors:
                    type:
                      - array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_transaction
                            - invalid_transaction_id
                            - invalid_link_code
                            - response_timeout
                            - unknown_error
                            - invalid_request
                        errorMessage:
                          type: string
      operationId: post-authorization-link-auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                requestTime:
                  type: string
                request:
                  type: object
                  required:
                    - transactionId
                    - linkedCode
                  properties:
                    transactionId:
                      type: string
                      description: This is the same transactionId sent in the /link-code request.
                    linkedCode:
                      type: string
                      description: linkCode for which status is already received as LINKED.
              required:
                - requestTime
                - request
      description: |-
        Link authorization code endpoint is invoked from UI application.

        1. This is a Long polling request to IDBB backend.
        2. validates the transactionId
        3. validates the linkCode if its LINKED.
        4. checks the cache to see if the auth-code is generated, if yes returns the response.
        5. If the auth-code is not yet generated, polling request waits for the configured time.
        6. On successful response, IDBB UI should redirect to the provided redirectUri with auth-code or error details.
      parameters:
        - schema:
            type: string
          in: header
          name: X-XSRF-TOKEN
          description: CSRF token as set in cookie key 'XSRF-TOKEN'
          required: true
      tags:
        - Wallet - QR Code
    parameters: []
  /linked-authorization/link-transaction:
    post:
      summary: Link Transaction endpoint
      operationId: post-authorization-link-transaction
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                  response:
                    type: object
                    properties:
                      linkTransactionId:
                        type: string
                        description: Unique link-transaction-id.
                      clientName:
                        type: string
                        description: Registered name of the OIDC client.
                      logoUrl:
                        type: string
                        description: Registered OIDC client Logo URL.
                      authorizeScopes:
                        type: array
                        description: List of requested scopes to be permitted by the end user.
                        items:
                          type: string
                      essentialClaims:
                        type: array
                        description: List of client request mandatory claim names.
                        items:
                          type: string
                      voluntaryClaims:
                        type: array
                        description: List of client request optional claim names.
                        items:
                          type: string
                      authFactors:
                        type: array
                        description: Auth factors defines the authentication modes that can be used to veifiy the user. More than one authFactor may be resolved or combination of auth factors. Precedence of authFactors is based on its order
                        items:
                          type: array
                          items:
                            $ref: '#/components/schemas/AuthFactor'
                      configs:
                        type: object
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_link_code
                            - invalid_transaction
                            - invalid_client_id
                            - unknown_error
                            - invalid_request
                        errorMessage:
                          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                requestTime:
                  type: string
                request:
                  type: object
                  required:
                    - linkCode
                  properties:
                    linkCode:
                      type: string
                      description: Link code as received by the wallet-app from the QR code scanning.
              required:
                - requestTime
                - request
      description: |-
        The link transaction endpoint is invoked from Wallet-app.

        1. Validates the link-code and its expiry and generates the linkTransactionId. This linkTransactionId is linked to transactionId used in the /link-code endpoint.

        2. Returns the auth-factors, clientName, logoUrl, User claims, authorize scopes along with linkTransactionId.

        **Note:**
        Wallet-app will hereafter address the transaction with this linkTransactionId for the /authenticate and /consent endpoints.
      tags:
        - Wallet - QR Code
    parameters: []
  /linked-authorization/authenticate:
    post:
      summary: Linked Authentication Endpoint
      operationId: post-linked-authenticate
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                  response:
                    type: object
                    properties:
                      linkedTransactionId:
                        type: string
                        description: This is the same transactionId received from /link-transaction endpoint.
                  errors:
                    type: array
                    description: List of Errors in case of request validation / processing failure in IDBB server.
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_transaction_id
                            - invalid_transaction
                            - invalid_identifier
                            - invalid_no_of_challenges
                            - auth_failed
                            - unknown_error
                            - invalid_request
                        errorMessage:
                          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                requestTime:
                  type: string
                  pattern: 'yyyy-MM-dd''T''HH:mm:ss.SSS''Z'''
                request:
                  type: object
                  required:
                    - linkedTransactionId
                    - individualId
                    - challengeList
                  properties:
                    linkedTransactionId:
                      type: string
                      description: This is the same transactionId received from /link-transaction endpoint
                    individualId:
                      type: string
                      description: User identifier (UIN/VID).
                    challengeList:
                      type: array
                      description: Authentication Challenge.
                      items:
                        $ref: '#/components/schemas/AuthChallenge'
              required:
                - requestTime
                - request
        description: ''
      description: |-
        Once end user provides the user identifier (UIN/VID) and all the required auth challenge to the Wallet-app, this endpoint will be invoked from wallet-app.

        Supported auth-challenge depends on the integrated IDBB implementation.

        1. Validates linkedTransactionId.
        2. Validates null / empty individualId.

        On Authentication Success: Only linkTransactionId is returned in the below response without any errors.

        On Authentication Failure: Error list will be returned.
      parameters: []
      tags:
        - Wallet - QR Code
    parameters: []
  /linked-authorization/consent:
    post:
      summary: Linked Consent Endpoint
      operationId: post-linked-consent
      description: |
        Once the authentication is successful and user permission is obtained, this endpoint will be invoked by the wallet app to send the accepted user claims and permitted scopes.

        1. Validates linkedTransactionId.
        2. Validate accepted claims and permitted scopes in the request.
        3. If valid, stores the accepted claims and permitted scopes in the datastore.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                requestTime:
                  type: string
                  pattern: 'yyyy-MM-dd''T''HH:mm:ss.SSS''Z'''
                request:
                  type: object
                  required:
                    - linkedTransactionId
                  properties:
                    linkedTransactionId:
                      type: string
                      description: This is the same transactionId received from /link-transaction endpoint.
                    permittedAuthorizeScopes:
                      type: array
                      description: List of permitted scopes by end-user.
                      items:
                        type: string
                    acceptedClaims:
                      type: array
                      description: List of accepted essential and voluntary claims by end-user.
                      items:
                        type: string
              required:
                - requestTime
                - request
        description: ''
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                  response:
                    type: object
                    properties:
                      linkedTransactionId:
                        type: string
                        description: This is the same transactionId received from /link-transaction endpoint.
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - invalid_transaction_id
                            - invalid_transaction
                            - invalid_accepted_claim
                            - invalid_permitted_scope
                            - invalid_request
                        errorMessage:
                          type: string
      tags:
        - Wallet - QR Code
    parameters: []
  /oauth/token:
    post:
      summary: Token Endpoint
      operationId: post-token
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id_token:
                    type: string
                    description: |-
                      Identity token in JWT format. Will have the below claims in the payload.
                      <ul>
                      <li>iss</li>
                      <li>sub - (PSUT)</li>
                      <li>aud</li>
                      <li>exp</li>
                      <li>iat</li>
                      <li>auth_time</li>
                      <li>nonce</li>
                      <li>acr</li>
                      <li>at_hash</li>
                      </ul>
                  access_token:
                    type: string
                    description: The access token in JWT format. This token will be used to call the UserInfo endpoint. Relying party application should handle access token as opaque.
                  token_type:
                    type: string
                    default: Bearer
                    enum:
                      - Bearer
                    description: 'The type of the access token, set to Bearer'
                  expires_in:
                    type: number
                    format: duration
                    description: 'The lifetime of the access token, in seconds.'
                required:
                  - id_token
                  - access_token
                  - token_type
                  - expires_in
          headers:
            Cache-Control:
              schema:
                type: string
                enum:
                  - no-store
            Pragma:
              schema:
                type: string
                enum:
                  - no-cache
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: The error code.
                    enum:
                      - invalid_transaction
                      - invalid_assertion
                      - invalid_redirect_uri
                      - invalid_input
                      - unknown_error
                      - invalid_request
                      - invalid_assertion_type
                  error_description:
                    type: string
                    description: Optional text providing additional information about the error that occurred.
                required:
                  - error
      description: |-
        Once the client / relying party application receives the authorization code through redirect, this OIDC complaint endpoint will be called from the relying party backend application to get the ID Token and Access Token.

        1. The only supported client authentication method : <b>private_key_jwt</b>
        2. ClientAssertion is a signed JWT with client's private key, corresponding public key should be shared with IDBB during the OIDC client creation process.
        3. clientAssertion JWT payload must be as below: 

        The JWT MUST contain the following REQUIRED Claim Values and MAY contain few additional OPTIONAL Claim Values:

        **iss**<span style="color:#FF0000">*</span> (Issuer): This MUST contain the client_id of the OIDC / OAuth Client.

        **sub**<span style="color:#FF0000">*</span> (Subject): This MUST contain the client_id of the OIDC / OAuth Client.

        **aud**<span style="color:#FF0000">*</span> (Audience): Value that identifies the IDBB server as an intended audience. The IDBB server MUST verify that it is an intended audience for the token. The audience SHOULD be the URL of the IDBB's token endpoint.

        **exp**<span style="color:#FF0000">*</span> (Expiration): Time on or after which the ID token MUST NOT be accepted for processing.

        **iat**<span style="color:#FF0000">*</span>: Time at which the JWT was issued.</p>

        **Note**: The Client Assertion JWT can contain other Claims. Any Claims used that are not understood WILL be ignored.</p>
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                  description: Authorization code grant type.
                  enum:
                    - authorization_code
                code:
                  type: string
                  description: 'Authorization code, sent as query param in the client''s redirect URI.'
                client_id:
                  type: string
                  description: Client Id of the OIDC client.
                client_assertion_type:
                  type: string
                  enum:
                    - 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer'
                  description: Type of the client assertion part of this request.
                client_assertion:
                  type: string
                  description: 'Private key signed JWT, This JWT payload structure is defined above as part of request description.'
                redirect_uri:
                  type: string
                  description: Valid client redirect_uri. Must be same as the one sent in the authorize call.
              required:
                - grant_type
                - code
                - client_id
                - client_assertion_type
                - client_assertion
                - redirect_uri
        description: ''
      tags:
        - OIDC
    parameters: []
  /oidc/userinfo:
    get:
      summary: UserInfo Endpoint
      responses:
        '200':
          description: OK
          content:
            application/jwt:
              schema:
                type: string
                format: jwt
                description: 'The response is signed and then encrypted, with the result being a Nested JWT. Signed using the IDBB''s private key. Signed full JWT will then be encrypted using OIDC client''s public key.'
        '401':
          description: Unauthorized
          headers:
            WWW-AUTHENTICATE:
              schema:
                type: string
                enum:
                  - invalid_token
                  - unknown_error
              description: 'Bearer error=invalid_token,  error_description=IDBB123: A user info request was made with an access token that was not recognized.'
      operationId: get-userinfo
      parameters: []
      description: |-
        Once the access token is received via the token endpoint, relying party backend application can call this OIDC compliant endpoint to request for the user claims.

        Consented user claims will be returned as a JWT. This JWT will be a nested JWT which is signed using JWS and then encrypted using JWE. 


        **Example**: Assuming the below are the requested claims by the relying party

        name : { "essential" : true }

        phone: { "essential" : true }

        **Response 1**: When consent is provided for both name and phone number:

        { "name" : "John Doe", "phone" : "033456743" }

        **Response 2**: When consent is provided for only name:

        { "name" : "John Doe" }

        **Response 3**: When Claims are requested with claims_locales : "en fr"

        { "name#en" : "John Doe", "name#fr" : "Jean Doe", "phone" : "033456743" } 

        **Supported User Info Claims**
        <ul>
        <li>sub - Partner Specific User Token (PSUT)</li>
        <li>name</li>
        <li>given_name</li>
        <li>family_name</li>
        <li>middle_name</li>
        <li>preferred_username</li>
        <li>nickname</li>
        <li>address</li>
        <li>gender</li>
        <li>birthdate</li>
        <li>profile photo</li>
        <li>email</li>
        <li>phone</li>
        <li>locale</li>
        <li>zoneinfo</li>
        <li>email_verified</li>
        <li>phone_number_verified</li>
        </ul>
      tags:
        - OIDC
      security:
        - Authorization-access_token: []
    parameters: []
  /wallet-binding:
    post:
      summary: Wallet Binding Endpoint (Draft)
      operationId: post-wallet-binding
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  responseTime:
                    type: string
                  response:
                    type: object
                    properties:
                      walletUserId:
                        type: string
                        description: Unique identifier given to public-key and partner specific userId mapping.
                      certificate:
                        type: string
                        description: Key binder signed certificate.
                      expireDateTime:
                        type: string
                        description: Expire date time of the signed certificate.
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        errorCode:
                          type: string
                          enum:
                            - unsupported_challenge_format
                            - key_binding_failed
                            - invalid_public_key
                            - invalid_auth_challenge
                            - duplicate_public_key
                            - invalid_request
                        errorMessage:
                          type: string
                required:
                  - responseTime
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                requestTime:
                  type: string
                request:
                  type: object
                  required:
                    - individualId
                    - authFactorType
                    - format
                    - challengeList
                    - publicKey
                  properties:
                    individualId:
                      type: string
                      description: User Id (UIN/VID).
                    authFactorType:
                      type: string
                      description: Auth factor type to be binded for the provided key.
                    format:
                      type: string
                      description: 'Format of the auth factor type supported in the wallet app.This is not stored, this value is only validated to check if its a supported format in the IDBB implementation.'
                    challengeList:
                      type: array
                      items:
                        $ref: '#/components/schemas/AuthChallenge'
                    publicKey:
                      type: object
                      description: key to be binded in JWK format.
              required:
                - requestTime
                - request
      description: |-
        Wallet binding endpoint is invoked by Wallet's backend server.

        1. Action will be initiated from wallet-app with authChallenge by user.
        2. Wallet backend server will receive the authChallenge, create this request and send to IDBB to complete the binding process.
        3. Binded walletUserId (WUID) is returned with IDBB signed certificate. 

        **Note**: Binding entry uniqueness is combination of these 3 values -> (PSUT, public-key, auth-factor-type)
      parameters: []
      security:
        - Authorization-wallet_binding: []
      tags:
        - Wallet - QR Code
    parameters: []
  /.well-known/jwks.json:
    get:
      summary: JSON Web Key Set Endpoint
      tags:
        - OIDC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  keys:
                    type: array
                    items:
                      type: object
                      properties:
                        kid:
                          type: string
                          description: The certificate's Key ID
                        use:
                          type: string
                          description: 'How the Key is used. Valid value: sig'
                          enum:
                            - sig
                        kty:
                          type: string
                          description: 'Cryptographic algorithm family for the certificate''s Key pair. Valid value: RSA'
                          enum:
                            - RSA
                        e:
                          type: string
                          description: RSA Key value (exponent) for Key blinding
                        'n':
                          type: string
                          description: RSA modulus value
                        x5t#S256:
                          type: string
                          x-stoplight:
                            id: 52n5251u1kfap
                          description: SHA-256 thumbprint of the certificate.
                        x5c:
                          type: array
                          description: Certificate to validate the Oauth server trust.
                          items:
                            x-stoplight:
                              id: l0l1kpf2b9jcn
                            type: string
                        exp:
                          type: string
                          x-stoplight:
                            id: q4o4nzqtvb09p
                          description: Expire datetime of the key. Given in ISO format.
                          format: date-time
                          example: '2026-02-05T13:43:07.979Z'
                      required:
                        - kid
                        - use
                        - kty
                        - e
                        - 'n'
                        - x5t#S256
                        - x5c
                        - exp
      operationId: get-certs
      description: Endpoint to fetch all the public keys of the IDBB server. Returns public key set in the JWKS format.
    parameters: []
  /.well-known/openid-configuration:
    get:
      summary: Configuration Endpoint
      tags:
        - OIDC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  issuer:
                    type: string
                    description: URL using the https scheme with no query or fragment component that the RP asserts as its Issuer Identifier. This also MUST be identical to the iss Claim value in ID Tokens issued from this Issuer.
                  authorization_endpoint:
                    type: string
                    description: URL of the OAuth 2.0 Authorization Endpoint.
                  token_endpoint:
                    type: string
                    description: URL of the OAuth 2.0 Token Endpoint.
                  userinfo_endpoint:
                    type: string
                    description: URL of the OP's UserInfo Endpoint.
                  jwks_uri:
                    type: string
                    description: 'URL of the OP''s JSON Web Key Set [JWK] document.'
                  registration_endpoint:
                    type: string
                    description: URL of Client Registration Endpoint.
                  scopes_supported:
                    type: array
                    description: 'JSON array containing a list of the OAuth 2.0 [RFC6749] scope values that this server supports.'
                    items:
                      type: string
                      enum:
                        - openid
                  response_types_supported:
                    type: array
                    description: JSON array containing a list of the OAuth 2.0 response_type values that this OP supports.
                    items:
                      type: string
                      enum:
                        - code
                  acr_values_supported:
                    type: array
                    description: JSON array containing a list of the Authentication Context Class References that IDP supports.
                    items: {}
                  userinfo_signing_alg_values_supported:
                    type: array
                    description: 'JSON array containing a list of the JWS [JWS] signing algorithms.'
                    items: {}
                  userinfo_encryption_alg_values_supported:
                    type: array
                    description: 'JSON array containing a list of the JWE [JWE] encryption algorithms.'
                    items: {}
                  userinfo_encryption_enc_values_supported:
                    type: array
                    description: 'JSON array containing a list of the JWE encryption algorithms (enc values) [JWA] supported by the UserInfo Endpoint to encode the Claims in a JWT.'
                    items: {}
                  token_endpoint_auth_methods_supported:
                    type: array
                    description: JSON array containing a list of Client Authentication methods supported by this Token Endpoint.
                    items:
                      type: string
                      enum:
                        - private_key_jwt
                  display_values_supported:
                    type: array
                    description: JSON array containing a list of the display parameter values that the OpenID Provider supports.
                    items: {}
                  claim_types_supported:
                    type: array
                    description: JSON array containing a list of the Claim Types that the OpenID Provider supports.
                    items:
                      type: string
                      enum:
                        - normal
                        - aggregated
                        - distributed
                  claims_supported:
                    type: array
                    description: JSON array containing a list of the Claim Names of the Claims that the OpenID Provider MAY be able to supply values for.
                    items:
                      type: string
                  claims_locales_supported:
                    type: array
                    description: Languages and scripts supported for values in Claims being returned.
                    items:
                      type: string
                  ui_locales_supported:
                    type: array
                    description: Languages and scripts supported for the user interface.
                    items:
                      type: string
                  response_modes_supported:
                    type: array
                    description: Mechanism to be used for returning parameters from the Authorization Endpoint.
                    items:
                      type: string
                      enum:
                        - query
                  token_endpoint_auth_signing_alg_values_supported:
                    type: array
                    items:
                      type: string
                      enum:
                        - RS256
                  id_token_signing_alg_values_supported:
                    type: array
                    items:
                      type: string
                      enum:
                        - RS256
                required:
                  - issuer
                  - authorization_endpoint
                  - token_endpoint
                  - userinfo_endpoint
                  - jwks_uri
                  - registration_endpoint
                  - scopes_supported
                  - response_types_supported
      operationId: get-.well-known-openid-configuration
      description: |-
        This endpoint is only for facilitating the OIDC provider details in a standard way.

        **Reference**: https://openid.net/specs/openid-connect-discovery-1_0.html
    parameters: []
components:
  schemas:
    AuthChallenge:
      title: AuthChallenge
      x-stoplight:
        id: n3fy2qkg9r7h2
      type: object
      description: Model to take any type of challenge from the end user as part of authenticate request.
      properties:
        authFactorType:
          type: string
          description: Defines the type of auth challenge. It should be same as authfactor.type (oauth-details response).
          enum:
            - OTP
            - BIO
            - PIN
            - WLA
        challenge:
          type: string
          description: Actual challenge as string.
        format:
          type: string
          description: Format of the challenge provided.
          enum:
            - alpha-numeric
            - jwt
            - encoded-json
            - number
      required:
        - authFactorType
        - challenge
        - format
    AuthFactor:
      title: AuthFactor
      x-stoplight:
        id: m6lnp87wondln
      type: object
      properties:
        type:
          type: string
          description: Name of the authentication method
          enum:
            - PIN
            - OTP
            - L1-bio-device
            - Wallet
        count:
          type: integer
          description: 'Applicable for biometric based authentication, number of bio segments to be captured for authentication.'
        bioSubTypes:
          type: array
          description: Applicable for biometric based authentication. Can be more specific about which bio segments should be captured.
          items:
            type: string
      required:
        - type
  securitySchemes:
    Authorization-add_oidc_client:
      type: http
      scheme: bearer
      description: Valid JWT issued by a trusted IAM system with "**add_oidc_client**" scope.
    Authorization-update_oidc_client:
      type: http
      scheme: bearer
      description: Valid JWT issued by a trusted IAM system including "**update_oidc_client**" scope.
    Authorization-access_token:
      type: http
      scheme: bearer
      description: Access token received from /token endpoint
    Authorization-wallet_binding:
      type: http
      scheme: bearer
      description: Valid JWT issued by a trusted IAM system with "**wallet_binding**" scope.
tags:
  - name: Client Management
    description: Endpoints for creation and updation of OIDC client details.
  - name: OIDC
    description: All OIDC compliant endpoints for performing the Open ID Connect flows.
  - name: Wallet - QR Code
    description: All endpoints used by the Wallet binding and Wallet - QR code based authentication.
